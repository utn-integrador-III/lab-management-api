#This is the header of the file, whose main goal is to display important information
#about the .yml file.
swagger: "2.0"
info:
  description: "Lab-Management API's Documentation"
  version: "1.0.0"
  title: "Swagger Lab-Management API"
  termsOfService: "Terms"
  contact:
    email: "ebarahona@utn.ac.cr"
host: "localhost:5003"
basePath: "/booking_api"
#The tags are the identifiers for the paths that are created, this will assign a path with a unique tag,
#meaning that, an specific end-point belongs to a tag or identifier
tags:
  - name: "Labs"
    description: "All Lab's Endpoints"
  - name: "Booking"
    description: "All Booking's Endpoints"
#the schemes will define the protocol that are been used by the end-points inside the API
schemes:
  - "https"
  - "http"
#The definitions will display the information that the end-points will return, all along with the
#corresponding messages of the errors.
definitions:
  careerResponse:
    type: object
    properties:
      career_id:
        type: string
        example: "ITI"
      career_name:
        type: string
        example: "Tecnologia de la Informacion"
  subjectResponse:
    type: object
    properties:
      subject_id:
        type: string
        example: "ITI-412"
      subject_name:
        type: string
        example: "Metodología Agiles de Desarrollo de Software"
  StudentGet:
    type: object
    properties:
      student_email:
        type: string
        example: "semataoe@est.utn.ac.cr"
      student_name:
        type: string
        example: "Sebastian Mata"
      computer:
        type: string
        example: "PC-01"
      usage_time:
        type: string
        example: "2024-06-16T21:00:00.000+00:00"
  Response:
    type: object
    properties:
      data:
        type: array
        items:
          $ref: "#/definitions"
      message:
        type: string
        example: "Successfully requested"
      message_code:
        type: string
        example: "OK_MSG"
  ErrorResponse:
    type: object
    properties:
      data:
        type: string
        example: null
      message:
        type: string
      message_code:
        type: string
  InvalidIdErrorResponse:
    type: object
    properties:
      data:
        type: string
        example: null
      message:
        type: string
        example: "Invalid Id"
      message_code:
        type: string
        example: "INVALID_ID"
  InternalErrorResponse:
    type: object
    properties:
      data:
        type: string
        example: null
      message:
        type: string
        example: "Internal server error"
      message_code:
        type: string
        example: "INTERNAL_SERVER_ERROR_MSG"
  LabGet:
    type: object
    properties:
      _id:
        type: string
        example: "0183IEHU#&#J"
      lab_name:
        type: string
        example: "Laboratories"
      lab_num:
        type: number
        example: 301
      computers:
        type: array
        items:
          type: string
        example:
          - "pc-01"
          - "pc-02"
          - "pc-03"
          - "pc-04"
          - "pc-05"
          - "pc-06"
          - "pc-07"
          - "pc-08"
          - "pc-09"
          - "pc-10"
          - "pc-11"
          - "pc-12"
          - "pc-13"
          - "pc-14"
          - "pc-15"
          - "pc-16"
          - "pc-17"
          - "pc-18"
          - "pc-19"
          - "pc-20"
          - "pc-21"
          - "pc-22"
          - "pc-23"
          - "pc-24"
          - "pc-25"
  LabGetById:
    type: object
    properties:
      _id:
        type: string
        example: "0183IEHU#&#J"
      lab_name:
        type: string
        example: "Laboratories"
      lab_num:
        type: number
        example: 301
      computers:
        type: array
        items:
          type: string
        example:
          - "pc-01"
          - "pc-02"
          - "pc-03"
          - "pc-04"
          - "pc-05"
          - "pc-06"
          - "pc-07"
          - "pc-08"
          - "pc-09"
          - "pc-10"
          - "pc-11"
          - "pc-12"
          - "pc-13"
          - "pc-14"
          - "pc-15"
          - "pc-16"
          - "pc-17"
          - "pc-18"
          - "pc-19"
          - "pc-20"
          - "pc-21"
          - "pc-22"
          - "pc-23"
          - "pc-24"
          - "pc-25"
  LabPost:
    type: object
    required:
      - "name"
    properties:
      _id:
        type: string
        example: "0183IEHU#&#J"
      lab_name:
        type: string
        example: "Laboratories"
      lab_num:
        type: number
        example: 301
      computers:
        type: array
        items:
          type: string
        example:
          - "pc-01"
          - "pc-02"
          - "pc-03"
          - "pc-04"
          - "pc-05"
          - "pc-06"
          - "pc-07"
          - "pc-08"
          - "pc-09"
          - "pc-10"
          - "pc-11"
          - "pc-12"
          - "pc-13"
          - "pc-14"
          - "pc-15"
          - "pc-16"
          - "pc-17"
          - "pc-18"
          - "pc-19"
          - "pc-20"
          - "pc-21"
          - "pc-22"
          - "pc-23"
          - "pc-24"
          - "pc-25"
  BookingGet:
    type: object
    properties:
      professor:
        type: string
        example: "Ever Barahona Mendoza"
      professor_email:
        type: string
        example: "ebarahona@utn.ac.cr"
      career:
        type: array
        items:
          $ref: "#/definitions/careerResponse"
      subject:
        type: array
        items:
          $ref: "#/definitions/subjectResponse"
      lab:
        type: integer
        example: 412
      end_time:
        type: string
        example: "2024-07-11T21:00:00-06:00"
      start_time:
        type: string
        example: "2024-07-11T17:00:00-06:00"
      students:
        type: array
        items:
          $ref: "#/definitions/StudentGet"
      observations:
        type: string
        example: ""
  Booking:
    type: object
    properties:
      _id:
        type: string
        example: "66882fc47495a27748ac7bb8"
      professor:
        type: string
        example: "Ever Barahona Mendoza"
      professor_email:
        type: string
        example: "ebarahona@utn.ac.cr"
      career:
        type: object
        additionalProperties: true
      subject:
        type: object
        additionalProperties: true
      lab:
        type: integer
        example: 302
      end_time:
        type: string
        format: date-time
        example: "2024-06-16T21:00:00"
      start_time:
        type: string
        format: date-time
        example: "2024-06-16T17:00:00"
      students:
        type: array
        items:
          type: object
          properties:
            student_email:
              type: string
              example: "ahidalgo@est.utn.ac.cr"
            student_name:
              type: string
              example: "Ana Hidalgo"
            computer:
              type: string
              example: "pc-01"
            usage_time:
              type: string
              format: date-time
              example: "2024-06-16T17:10:00"
            observations:
              type: string
              example: ""
  BookingPost:
    type: object
    required:
      - "professor"
      - "professor_email"
      - "career"
      - "subject"
      - "lab"
      - "end_time"
      - "start_time"
    properties:
      professor:
        type: string
        example: "Ever Barahona Mendoza"
      professor_email:
        type: string
        example: "ebarahona@utn.ac.cr"
      career:
        type: array
        items:
          $ref: "#/definitions/careerResponse"
      subject:
        type: array
        items:
          $ref: "#/definitions/subjectResponse"
      lab:
        type: integer
        example: 412
      end_time:
        type: string
        example: "2024-07-11T21:00:00-06:00"
      start_time:
        type: string
        example: "2024-07-11T17:00:00-06:00"
      students:
        type: array
        items:
          $ref: "#/definitions/StudentGet"
      observations:
        type: string
        example: ""
  BookingPut:
    type: object
    required:
      - "lab_book_id"
      - "student_email"
      - "student_name"
      - "computer"
    properties:
      lab_book_id:
        type: string
        example: "66882fc47495a27748ac7bb8"
      student_email:
        type: string
        example: "alejandro@est.utn.ac.cr"
      student_name:
        type: string
        example: "Alejandro Jose Rodríguez Jaen"
      computer:
        type: string
        example: "pc-1"
  ProfessorGetByEmail:
    type: object
    properties:
      data:
        properties:
          professor_name:
            type: string
            example: "Juan Luis Bravo"
          professor_email:
            type: string
            example: "juanluis@utn.ac.cr"
          CareerId:
            type: string
            example: "ITI"
          Career:
            type: string
            example: "Tecnologia de la Informacion"
          Courses:
            type: "array"
            items:
              type: object
              properties:
                course_id:
                  type: string
                  example: "ITI-201"
                course_name:
                  type: "string"
                  example: "Matematica discreta"
  ProfessorInfoGet:
    type: object
    properties:
      _id:
        type: string
        example: 7619ajbamami91
      professor_email:
        type: string
        example: "ebarahona@utn.ac.cr"
      professor_name:
        type: string
        example: "Ever Barahona Mendoza"
      career:
        type: object
        properties:
          career_id:
            type: string
            example: "ITI"
          career_name:
            type: string
            example: "Tecnologia de la Informacion"
      subject:
        type: array
        items:
          type: object
          properties:
            subject_id:
              type: string
            subject_name:
              type: string
        example:
        - subject_id: "ITI-123"
          subject_name: "Fundamentos de Base de Datos"
        - subject_id: "ITI-412"
          subject_name: "Ingenieria de Requerimientos y Modelado de SW"
  Issue:
    type: "object"
    required:
      - "lab"
      - "person"
      - "issue"
    properties:
      lab:
        type: "string"
        example: "Lab A"
        description: "Name of the lab where the issue occurred."
      person:
        type: "object"
        required:
          - "email"
          - "student_name"
        properties:
          email:
            type: "string"
            format: "email"
            example: "student@example.com"
            description: "Email address of the person reporting the issue."
          student_name:
            type: "string"
            example: "John Doe"
            description: "Name of the student reporting the issue."
      issue:
        type: "array"
        items:
          type: "object"
          required:
            - "computer"
            - "description"
          properties:
            computer:
              type: "string"
              example: "Computer 1"
              description: "Name or ID of the computer."
            description:
              type: "string"
              example: "The computer is not turning on."
              description: "Description of the issue."

      observations:
        type: "string"
        example: "No additional observations."
        description: "Additional observations related to the issue."
  IssueGetById:
    type: "object"
    properties:
      _id:
        type: "string"
        example: "6673001a1f3cf27f746c67e6"
      lab:
        type: "integer"
        example: 304
      date_issue:
        type: "string"
        format: "date-time"
        example: "2024-06-16T21:00:00Z"
      person:
        type: "object"
        required:
          - "email"
          - "student_name"
        properties:
          email:
            type: "string"
            format: "email"
            example: "ahidalgo@est.utn.ac.cr"
          student_name:
            type: "string"
            example: "Ana Hidalgo"
      issue:
        type: "array"
        items:
          type: "object"
          required:
            - "computer"
            - "description"
            - "is_repaired"
          properties:
            computer:
              type: "string"
              example: "pc-03"
            description:
              type: "string"
              example: "No carga el docker y problemas de conectividad."
            is_repaired:
              type: "boolean"
              example: false
      report_to:
        type: "string"
        example: "chcamonael@est.utn.ac.cr"
      observations:
        type: "string"
        example: "Sin observaciones"
      status:
        type: "string"
        example: "Pending"
      update:
        type: "array"
        items:
          type: "object"
          required:
            - "date"
            - "observation"
          properties:
            date:
              type: "string"
              format: "date-time"
              example: "2024-06-18T00:00:00Z"
            observation:
              type: "string"
              example: "Se procedió a la revisión, se detecta problemas en actualización de windows."
  IssueResponse:
    type: "object"
    properties:
      data:
        type: "object"
        properties:
          lab:
            type: "string"
          date_issue:
            type: "string"
            format: "date-time"
          person:
            $ref: "#/definitions/Person"
          issue:
            type: "array"
            items:
              $ref: "#/definitions/IssueItem"
          report_to:
            type: "string"
            example: ""
          observations:
            type: "string"
            example: "No additional observations."
          status:
            type: "string"
            example: "Pending"
          update:
            type: "array"
            items:
              $ref: "#/definitions/UpdateItem"
      message:
        type: "string"
        example: "Issue successfully created"
      message_code:
        type: "string"
        example: "ISSUE_SUCCESSFULLY_CREATED"
        
        
  IssueResponseGetAll:
    type: "object"
    properties:
      data:
        type: "object"
        properties:
          lab:
            type: "string"
          date_issue:
            type: "string"
            format: "date-time"
          person:
            $ref: "#/definitions/Person"
          issue:
            type: "array"
            items:
              $ref: "#/definitions/IssueItem"
          report_to:
            type: "string"
            example: ""
          observations:
            type: "string"
            example: "No additional observations."
          status:
            type: "string"
            example: "Pending"
          update:
            type: "array"
            items:
              $ref: "#/definitions/UpdateItem"
      message:
        type: "string"
        example: "Successfully requested"
      message_code:
        type: "string"
        example: "OK_MSG"

  IssueErrorResponse:
    type: "object"
    properties:
      data:
        type: "string"
        example: null
      message:
        type: "string"
      message_code:
        type: "string"

  Person:
    type: "object"
    required:
      - "email"
      - "student_name"
    properties:
      email:
        type: "string"
        format: "email"
        example: "student@example.com"
        description: "Email address of the person reporting the issue."
      student_name:
        type: "string"
        example: "John Doe"
        description: "Name of the student reporting the issue."

  IssueItem:
    type: "object"
    required:
      - "computer"
      - "description"
      - "is_repaired"
    properties:
      computer:
        type: "string"
        example: "Computer 1"
        description: "Name or ID of the computer."
      description:
        type: "string"
        example: "The computer is not turning on."
        description: "Description of the issue."
      is_repaired:
        type: "boolean"
        example: false
        description: "Indicates whether the issue has been repaired."

  UpdateItem:
    type: "object"
    required:
      - "observation"
    properties:
      observation:
        type: "string"
        example: "Issue acknowledged."
        description: "Observation or update regarding the issue."
      date:
        type: "string"
        format: "date-time"
        example: "2024-07-18T12:00:00Z"
        description: "Date of the update. If not provided, the current date is used."
        
  IssueUpdateComments:
    type: object
    properties:
      _id:
        type: string
        description: ID of the issue
      status:
        type: string
        description: Status of the issue
      new_update:
        type: string
        description: New update comment for the issue
      computer:
        type: array
        items:
          type: object
          properties:
            computer:
              type: string
              description: Computer identifier
            is_repaired:
              type: boolean
              description: Repair status of the computer
  UpdateResponseComments:
    type: object
    properties:
      message:
        type: string
        description: Response message
      status:
        type: integer
        description: HTTP status code
      message_code:
        type: string
        description: Code representing the message
  ErrorResponseComments:
    type: object
    properties:
      message:
        type: string
        description: Error message
      status:
        type: integer
        description: HTTP status code
      message_code:
        type: string
        description: Code representing the message
  ExamplePendingIssue:
    type: object
    example:
      _id: "66aac67fa9dc76dc722237ce"
      computer: []
      status: "Pending"
      new_update: "Se procedió a la revisión, se detecta problemas en actualización de windows"
  ExampleActiveIssue:
    type: object
    example:
      _id: "66aac67fa9dc76dc722237ce"
      computer:
        - computer: "pc-03"
          is_repaired: true
      status: "Active"
      new_update: "Se procedió a la revisión, se detecta problemas en actualización de windows"
  ExampleCancelledIssue:
    type: object
    example:
      _id: "66aac67fa9dc76dc722237ce"
      computer: []
      status: "Cancelled"
      new_update: "Se procedió a la revisión, se detecta problemas en actualización de windows"
      
  IssueModifyAPending:
    type: object
    properties:
      computer:
        type: string
        description: "Identificador de la computadora afectada."
        example: "pc-03"
      description:
        type: string
        description: "Descripción del problema reportado."
        example: "No le sirve el Wifi ni el sonido"
    required:
      - computer
      - description

  IssueUpdateRequest:
    type: object
    properties:
      _id:
        type: string
        description: "Identificador único del issue."
        example: "21213k1k31313kn312"
      issue:
        type: array
        items:
          $ref: "#/definitions/IssueModifyAPending"
        description: "Lista de issues relacionados con las computadoras."
      observations:
        type: string
        description: "Observaciones adicionales sobre el issue."
        example: "Se avanzo con la pc-03"
      email:
        type: string
        description: "Email del usuario que reporta el issue."
        example: "student@example.com"
      
    required:
      - _id
      - issue
      - observations
      - email

  IssueUpdateResponse:
    type: object
    properties:
      _id:
        type: string
        description: "Identificador único del issue."
        example: "21213k1k31313kn312"
      lab:
        type: string
        description: "Identificador del lab"
        example: "303"
      person:
        $ref: "#/definitions/Person"
      issue:
        type: array
        items:
          $ref: "#/definitions/IssueModifyAPending"
        description: "Lista de issues relacionados con las computadoras."
      observations:
        type: string
        description: "Observaciones adicionales sobre el issue."
        example: "Se avanzo con la pc-03"
      date_issue:
        type: string
        format: date-time
        description: "Fecha y hora en que se creó el issue."
      report_to:
          type: "string"
          example: "yarguedas@utn.ac.cr"
      status:
          type: "string"
          example: "Pending"
      update:
          type: "array"
          items:
            $ref: "#/definitions/UpdateItem"
    required:
      - _id
      - lab
      - person
      - issue
      - observations
      - date_issue
      - status
      - update



#The paths are the ones with all the information of the CRUD methods of the end-points
paths:
  /Lab:
    get:
      tags:
        - "Labs"
      parameters:
      - name: Authorization
        in: header
        description: an authorization header
        required: true
        type: string
      summary: "Get list of all Labs"
      description: "Get list of all Labs"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "200":
          description: "A list of Labs"
          schema:
            allOf:
            - $ref: "#/definitions/Response"
            - properties: 
                data:
                  items:
                    $ref: "#/definitions/LabGet"
                message:
                  example: "Successfully requested"
                message_code:
                  example: "OK_MSG"
        "400":
          description: "Bad Request"
          schema:
            allOf:
              - $ref: "#/definitions/ErrorResponse"
              - properties:
                  data:
                    $ref: "#/definitions/StudentGet"
                  message:
                    example: "Server Couldn't Process the Request"
                  message_code:
                    example: "BAD_REQUEST"
        "401":
          description: "Unauthorized"
          schema:
            allOf:
              - $ref: "#/definitions/ErrorResponse"
              - properties:
                  message:
                    example: "User Do not have the Required Permissions"
                  message_code:
                    example: "UNAUTHORIZED"
        "404":
          description: "No Labs found"
          schema:
            allOf:
              - $ref: "#/definitions/ErrorResponse"
              - properties:
                  message:
                    example: "Labs not found"
                  message_code:
                    example: "NOT_FOUND"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/InternalErrorResponse"
    post:
      tags:
        - "Labs"
      parameters:      
        - name: Authorization
          in: header
          description: an authorization header
          required: true
          type: string
        - in: "body"
          name: "body"
          description: "Lab object that needs to be added"
          required: true
          schema:
            $ref: "#/definitions/LabPost"
      summary: "Create a Lab"
      description: "Create a Lab"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "201":
          description: "Lab Successfully Created"
          schema:
            allOf:
            - $ref: "#/definitions/Response"
            - properties: 
                data:
                  items:
                    $ref: "#/definitions/LabGet"
                message:
                  example: "Lab Created"
                message_code:
                  example: "LAB_SUCCESSFULLY_CREATED"
        "400":
          description: "Bad Request"
          schema:
            allOf:
              - $ref: "#/definitions/ErrorResponse"
              - properties:
                  data:
                    $ref: "#/definitions/StudentGet"
                  message:
                    example: "Server Couldn't Process the Request"
                  message_code:
                    example: "BAD_REQUEST"
        "401":
          description: "Unauthorized"
          schema:
            allOf:
              - $ref: "#/definitions/ErrorResponse"
              - properties:
                  message:
                    example: "User Do not have the Required Permissions"
                  message_code:
                    example: "UNAUTHORIZED"
        "409":
          description: "Lab already exists"
          schema:
            allOf:
              - $ref: "#/definitions/ErrorResponse"
              - properties:
                  message:
                    example: "Lab already exist"
                  message_code:
                    example: "LAB_ALREADY_EXIST"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/InternalErrorResponse"
    put:
        tags:
          - "Labs"
        parameters:
          - name: Authorization
            in: header
            description: an authorization header
            required: true
            type: string
          - in: "body"
            name: "body"
            description: "Lab object that needs to be updated"
            required: true
            schema:
              $ref: "#/definitions/LabGetById"
        summary: "Update a Lab"
        description: "Update a Lab"
        consumes:
          - "application/json"
        produces:
          - "application/json"
        responses:
          "200":
            description: "An updated Lab"
            schema:
              allOf:
                - $ref: "#/definitions/Response"
                - properties:
                    data:
                      $ref: "#/definitions/LabGet"
                    message:
                      example: "Lab successfully updated"
                    message_code:
                      example: "Lab_SUCCESSFULLY_UPDATED"
          "400":
            description: "Bad Request"
            schema:
              allOf:
                - $ref: "#/definitions/ErrorResponse"
                - properties:
                    data:
                      $ref: "#/definitions/StudentGet"
                    message:
                      example: "Server Couldn't Process the Request"
                    message_code:
                      example: "BAD_REQUEST"
          "401":
            description: "Unauthorized"
            schema:
              allOf:
                - $ref: "#/definitions/ErrorResponse"
                - properties:
                    message:
                      example: "User Do not have the Required Permissions"
                    message_code:
                      example: "UNAUTHORIZED"
          "404":
            description: "No Labs found"
            schema:
              allOf:
                - $ref: "#/definitions/ErrorResponse"
                - properties:
                    message:
                      example: "Labs not found"
                    message_code:
                      example: "NOT_FOUND"
          "500":
            description: "Internal Server Error"
            schema:
              $ref: "#/definitions/InternalErrorResponse"
          "422":
            description: "Invalid Id"
            schema:
              allOf:
                - $ref: "#/definitions/ErrorResponse"
                - properties:
                    message:
                      example: "Invalid Id"
                    message_code:
                      example: "INVALID_ID"
  /Lab/{LabId}:

    
    get:
      tags:
        - "Labs"
      summary: "Find Lab by ID"
      description: "Returns a single Lab"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "LabId"
          in: "path"
          description: "ID of Lab to return"
          required: true
          type: "integer"
          format: "integer"
        - name: Authorization
          in: header
          description: an authorization header
          required: true
          type: string
      responses:
        "200":
          description: "Get single Lab successfully"
          schema:
            allOf:
              - $ref: "#/definitions/Response"
              - properties:
                  data:
                    $ref: "#/definitions/LabGet"
        "400":
            description: "Bad Request"
            schema:
              allOf:
                - $ref: "#/definitions/ErrorResponse"
                - properties:
                    data:
                      $ref: "#/definitions/StudentGet"
                    message:
                      example: "Server Couldn't Process the Request"
                    message_code:
                      example: "BAD_REQUEST"
        "401":
            description: "Unauthorized"
            schema:
              allOf:
                - $ref: "#/definitions/ErrorResponse"
                - properties:
                    message:
                      example: "User Do not have the Required Permissions"
                    message_code:
                      example: "UNAUTHORIZED"
        "404":
          description: "Lab not found"
          schema:
            allOf:
              - $ref: "#/definitions/ErrorResponse"
              - properties:
                  message:
                    example: "Lab not found"
                  message_code:
                    example: "Lab_ITEM_NOT_FOUND"
        "422":
          description: "Invalid Object Id"
          schema:
            $ref: "#/definitions/InvalidIdErrorResponse"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/InternalErrorResponse"
    delete:
      tags:
        - "Labs"
      summary: "Delete Lab by ID"
      description: "Returns a deleted Lab"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "LabId"
          in: "path"
          description: "ID of Lab to delete"
          required: true
          type: "integer"
          format: "integer"
        - name: Authorization
          in: header
          description: an authorization header
          required: true
          type: string
      responses:
        "200":
          description: "Lab successfully deleted"
          schema:
            allOf:
              - $ref: "#/definitions/Response"
              - properties:
                  data:
                    $ref: "#/definitions/LabGet"
                  message:
                    example: "Lab successfully deleted"
                  message_code:
                    example: "Lab_SUCCESSFULLY_DELETED"
        "400":
            description: "Bad Request"
            schema:
              allOf:
                - $ref: "#/definitions/ErrorResponse"
                - properties:
                    data:
                      $ref: "#/definitions/StudentGet"
                    message:
                      example: "Server Couldn't Process the Request"
                    message_code:
                      example: "BAD_REQUEST"
        "401":
            description: "Unauthorized"
            schema:
              allOf:
                - $ref: "#/definitions/ErrorResponse"
                - properties:
                    message:
                      example: "User Do not have the Required Permissions"
                    message_code:
                      example: "UNAUTHORIZED"
        "404":
          description: "Lab not found"
          schema:
            allOf:
              - $ref: "#/definitions/ErrorResponse"
              - properties:
                  message:
                    example: "Lab not found"
                  message_code:
                    example: "Lab_ITEM_NOT_FOUND"
        "422":
          description: "Invalid Object Id"
          schema:
            $ref: "#/definitions/InvalidIdErrorResponse"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/InternalErrorResponse"
  /booking:
  
    post:
      tags:
        - "Booking"
      parameters:
        - name: Authorization
          in: header
          description: an authorization header
          required: true
          type: string
        - in: "body"
          name: "body"
          description: "Booking object that needs to be added"
          required: true
          schema:
            $ref: "#/definitions/BookingPost"
      summary: "Create a Booking"
      description: "Create a Booking"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "201":
          description: "Booking succesfully created"
          schema:
            allOf:
              - $ref: "#/definitions/Response"
              - properties:
                  data:
                    $ref: "#/definitions/BookingGet"
                  message:
                    example: "Booking successfully created"
                  message_code:
                    example: "BOOKING_SUCCESSFULLY_CREATED"
        "400":
            description: "Bad Request"
            schema:
              allOf:
                - $ref: "#/definitions/ErrorResponse"
                - properties:
                    data:
                      $ref: "#/definitions/StudentGet"
                    message:
                      example: "Server Couldn't Process the Request"
                    message_code:
                      example: "BAD_REQUEST"
        "401":
            description: "Unauthorized"
            schema:
              allOf:
                - $ref: "#/definitions/ErrorResponse"
                - properties:
                    message:
                      example: "User Do not have the Required Permissions"
                    message_code:
                      example: "UNAUTHORIZED"
        "409":
          description: "Booking already exists"
          schema:
            allOf:
              - $ref: "#/definitions/ErrorResponse"
              - properties:
                  message:
                    example: "Booking already exist"
                  message_code:
                    example: "Booking_ALREADY_EXIST"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/InternalErrorResponse"   
    get:
      tags:
        - "Booking"
      summary: "Get all booking labs filtered by the current system dateTime"
      description: "Retrieve a list of booking labs filtered by the current system dateTime. Provides error responses for different scenarios."
      responses:
        "200":
          description: "Bookings successfully retrieved"
          schema:
            allOf:
              - $ref: "#/definitions/Response"
              - properties:
                  data:
                    items:
                      $ref: "#/definitions/BookingGet"
                  message:
                    example: "Bookings successfully retrieved"
                  message_code:
                    example: "BOOKING_SUCCESSFULLY_RETRIEVED"
        "400":
          description: "Bad Request"
          schema:
            allOf:
              - $ref: "#/definitions/ErrorResponse"
              - properties:
                  message:
                    example: "Bad Request"
                  message_code:
                    example: "BAD_REQUEST"
        "404":
          description: "No Bookings Found"
          schema:
            allOf:
              - $ref: "#/definitions/ErrorResponse"
              - properties:
                  message:
                    example: "No bookings found that match the criteria"
                  message_code:
                    example: "BOOKING_NO_MATCHING_BOOKINGS"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/InternalErrorResponse"

       
  /booking/computer:
    delete:
      tags:
        - "Booking"
      summary: "Eliminar una reserva de computadora"
      description: "Este endpoint es utilizado por los estudiantes para eliminar una reserva. Elimina al estudiante para una computadora específica en la colección `lab_book`."
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: Authorization
          in: header
          description: an authorization header
          required: true
          type: string
        - in: "body"
          name: "body"
          description: "Datos necesarios para eliminar una reserva"
          required: true
          schema:
            type: object
            properties:
              id:
                type: string
                description: "ID del laboratorio"
              student_email:
                type: string
                description: "Email del estudiante"
              computer:
                type: string
                description: "Nombre o identificador de la computadora"
            required:
              - id
              - student_email
              - computer
      responses:
        '200':
          description: "Reserva eliminada exitosamente"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Reserva eliminada exitosamente"
              message_code:
                type: string
                example: "RESERVA_ELIMINADA_EXITOSAMENTE"
        "401":
            description: "Unauthorized"
            schema:
              allOf:
                - $ref: "#/definitions/ErrorResponse"
                - properties:
                    message:
                      example: "User Do not have the Required Permissions"
                    message_code:
                      example: "UNAUTHORIZED"
        '400':
          description: "Solicitud incorrecta, faltan datos requeridos"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Faltan datos requeridos"
              message_code:
                type: string
                example: "DATOS_REQUERIDOS_FALTANTES"
        '500':
          description: "Error interno del servidor"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Error interno del servidor"
              message_code:
                type: string
                example: "ERROR_INTERNO_SERVIDOR"  
    post:
      tags:
        - "Booking"
      summary: "Update a lab booking with new student information"
      description: "This endpoint updates a lab booking by adding a new student with the provided information."
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Lab booking update data"
          required: true
          schema:
            $ref: "#/definitions/BookingPut"
      responses:
        "200":
          description: "Computer booked successfully"
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: "#/definitions/BookingPut"
              message:
                type: string
                example: "Computer booked successfully"
              message_code:
                type: string
                example: "LAB_SUCCESSFULLY_UPDATED"
        "400":
          description: "Validation Error"
          schema:
            type: object
            properties:
              data:
                type: string
                example: null
              message:
                type: string
                example: "Invalid update data: missing key 'computer'"
              message_code:
                type: string
                example: "INCORRECT_REQUEST_PARAM"
        "404":
          description: "Lab book not found"
          schema:
            type: object
            properties:
              data:
                type: string
                example: null
              message:
                type: string
                example: "Lab book not found"
              message_code:
                type: string
                example: "LAB_NOT_FOUND"
        "409":
          description: "Computer already booked"
          schema:
            type: object
            properties:
              data:
                type: string
                example: null
              message:
                type: string
                example: "Computer already booked"
              message_code:
                type: string
                example: "CONFLICT_MSG"
        "500":
          description: "Internal Server Error"
          schema:
            type: object
            properties:
              data:
                type: string
                example: null
              message:
                type: string
                example: "Error retrieving lab book: Invalid ObjectId: 66882fc47495a27748ac7b"
              message_code:
                type: string
                example: "INTERNAL_SERVER_ERROR_MSG"
                
  /booking/{id}:
    get:
      tags:
        - Booking
      summary: Get a booking by ID
      description: Retrieve the details of a booking by its ID.
      parameters:
        - name: id
          in: path
          description: The ID of the booking to retrieve
          required: true
          type: string  
      responses:
        '200':
          description: Successfully retrieved the booking
          schema:
            type: object
            properties:
              data:
                $ref: '#/definitions/Booking'
              message:
                type: string
                example: "Booking found"
              message_code:
                type: string
                example: "OK_MSG"
              status:
                type: integer
                example: 200
        '400':
          description: Invalid ID supplied
          schema:
            type: object
            properties:
              data:
                type: object
              message:
                type: string
                example: "Invalid booking ID"
              message_code:
                type: string
                example: "INVALID_ID"
              status:
                type: integer
                example: 400
        
        '401':
          description: Unauthorized
          schema:
            type: object
            properties:
              data:
                type: object
                example: null
              message:
                type: string
                example: "User Do not have the Required Permissions"
              message_code:
                type: string
                example: "UNAUTHORIZED"
        
        
        '404':
          description: Booking not found
          schema:
            type: object
            properties:
              data:
                type: object
              message:
                type: string
                example: "Booking does not exist"
              message_code:
                type: string
                example: "NO_DATA"
              status:
                type: integer
                example: 200
        '500':
          description: Internal server error
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Internal server error"
  /professor/byemail:
    get:
      tags:
        - "Professors"
      summary: "Get professor information by email"
      description: "Returns the information of a professor based on their email address"
      produces:
        - "application/json"
      parameters:
        - name: "professor_email"
          in: "query"
          description: "Email address of the professor"
          required: true
          type: "string"
        - name: Authorization
          in: header
          description: an authorization header
          required: true
          type: string
      responses:
        "200":
          description: "Successful response"
          schema:
            allOf:
              - $ref: "#/definitions/Response"
              - properties:
                  data:
                    $ref: "#/definitions/ProfessorGetByEmail"
        "401":
            description: "Unauthorized"
            schema:
              allOf:
                - $ref: "#/definitions/ErrorResponse"
                - properties:
                    message:
                      example: "User Do not have the Required Permissions"
                    message_code:
                      example: "UNAUTHORIZED"
            
        "400":
          description: "Bad Request - Professor email parameter is required"
          schema:
            type: "object"
            properties:
              data:
                type: "string"
                example: null
              message:
                type: "string"
                example: "Professor email required"
              message_code:
                type: "string"
                example: "PROFESSOR_EMAIL_REQUIRED"
        "404":
          description: "Not Found - Professor not found"
          schema:
            allOf:
              - $ref: "#/definitions/ErrorResponse"
              - properties:
                  message:
                    example: "Professor not found"
                  message_code:
                    example: "PROFESSOR_NOT_FOUND"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/InternalErrorResponse"
  /professor/info:
    get:
      tags:
        - "Professors"
      parameters:
      - name: Authorization
        in: header
        description: an authorization header
        required: true
        type: string
      summary: "Get professor information"
      description: "Returns the detailed information of a professor"
      produces:
        - "application/json"
      responses:
        "200":
          description: "Successful response"
          schema:
            allOf:
              - $ref: "#/definitions/Response"
              - properties:
                  data:
                    $ref: "#/definitions/ProfessorInfoGet"
        "401":
            description: "Unauthorized"
            schema:
              allOf:
                - $ref: "#/definitions/ErrorResponse"
                - properties:
                    message:
                      example: "User Do not have the Required Permissions"
                    message_code:
                      example: "UNAUTHORIZED"
        "404":
          description: "Not Found - Professor not found"
          schema:
            allOf:
              - $ref: "#/definitions/ErrorResponse"
            example:
              data: null
              message: "Professor not found"
              message_code: "PROFESSOR_NOT_FOUND"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/InternalErrorResponse"
  /issue:
    get:
        tags:
          - "Issue"
        summary: "Get all issues"
        description: "Retrieve a list of all issues."
        produces:
          - "application/json"
        parameters:
          - name: Authorization
            in: header
            description: "An authorization header"
            required: true
            type: string
        responses:
          "200":
            description: "Successfully requested"
            schema:
              $ref: "#/definitions/IssueResponseGetAll"
          
          "401":
            description: "Unauthorized"
            schema:
              allOf:
                - $ref: "#/definitions/ErrorResponse"
                - properties:
                    message:
                      example: "User Do not have the Required Permissions"
                    message_code:
                      example: "UNAUTHORIZED"
          
          "500":
            description: "Internal Server Error"
            schema:
              $ref: "#/definitions/InternalErrorResponse"
    post:
      tags:
        - "Issue"
      summary: "Create a new issue"
      description: "Create a new issue with the specified details."
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: Authorization
          in: header
          description: "An authorization header"
          required: true
          type: string
        - in: body
          name: body
          description: "Issue object that needs to be added"
          required: true
          schema:
            $ref: "#/definitions/Issue"
      responses:
        "201":
          description: "Issue successfully created"
          schema:
            $ref: "#/definitions/IssueResponse"
        "400":
          description: "Bad Request - Missing or invalid parameters"
          schema:
            allOf:
              - $ref: "#/definitions/IssueErrorResponse"
              - properties:
                  message:
                    example: "lab is required"
                  message_code:
                    example: "ISSUE_LAB_REQUIRED"
        "401":
          description: "Unauthorized"
          schema:
            allOf:
              - $ref: "#/definitions/ErrorResponse"
              - properties:
                  message:
                    example: "User Do not have the Required Permissions"
                  message_code:
                    example: "UNAUTHORIZED"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/InternalErrorResponse"
    put:
      summary: "Actualizar un issue existente"
      description: "Actualiza la información de un issue existente en el sistema."
      tags:
        - "Issue"
      parameters:
        - name: Authorization
          in: header
          description: "An authorization header"
          required: true
          type: string
        - in: "body"
          name: "body"
          description: "Datos necesarios para actualizar el issue."
          required: true
          schema:
            $ref: "#/definitions/IssueUpdateRequest"
      responses:
        "200":
          description: "Issue actualizado exitosamente."
          schema:
            $ref: "#/definitions/IssueUpdateResponse"
        "400":
          description: "Solicitud incorrecta. Faltan campos requeridos o contienen errores."
          schema:
            allOf:
              - $ref: "#/definitions/ErrorResponse"
              - properties:
                  message:
                    example: "Solicitud incorrecta. Verifica los campos requeridos."
                  message_code:
                    example: "BAD_REQUEST"
        "401":
          description: "Acción no autorizada. El usuario no tiene permiso para actualizar el issue."
          schema:
            allOf:
              - $ref: "#/definitions/ErrorResponse"
              - properties:
                  message:
                    example: "Usuario no autorizado para esta acción."
                  message_code:
                    example: "ISSUE_UNAUTHORIZED_ACTION"
        "404":
          description: "Issue no encontrado."
          schema:
            allOf:
              - $ref: "#/definitions/ErrorResponse"
              - properties:
                  message:
                    example: "Issue no encontrado."
                  message_code:
                    example: "NOT_FOUND"
        "500":
          description: "Error interno del servidor."
          schema:
            $ref: "#/definitions/InternalErrorResponse"
            
    delete:
      tags:
        - "Issue"
      summary: "Delete an issue"
      description: "Delete an issue based on the provided ID."
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: Authorization
          in: header
          description: "An authorization header"
          required: true
          type: string
        - in: body
          name: body
          description: "Object containing the issue ID to delete"
          required: true
          schema:
            type: "object"
            properties:
              _id:
                type: "string"
                description: "ID of the issue to delete"
                example: "64b5d6c9c9d0a5f831c0b3e8"
      responses:
        "200":
          description: "Issue successfully deleted"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Issue successfully deleted"
              message_code:
                type: "string"
                example: "ISSUE_SUCCESSFULLY_DELETED"
        "400":
          description: "Bad Request - Missing or invalid ID"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "ID is required"
                
        "401":
          description: "Unauthorized"
          schema:
            allOf:
              - $ref: "#/definitions/ErrorResponse"
              - properties:
                  message:
                    example: "User Do not have the Required Permissions"
                  message_code:
                    example: "UNAUTHORIZED"
                    
        "404":
          description: "Not Found - Issue not found or status is not pending"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Issue not found or status is not pending"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/InternalErrorResponse"
            
  /issue/{issueId}:
    get:
      tags:
        - "Issue"
      summary: "Find Issue by ID"
      description: "Returns a single Issue"
      parameters:
        - name: "issueId"
          in: "path"
          description: "ID of Issue to return"
          required: true
          type: "integer"
          format: "integer"
        - name: Authorization
          in: header
          description: an authorization header
          required: true
          type: string
      responses:
        "200":
          description: "Successfully requested"
          schema:
            $ref: "#/definitions/IssueResponseGetAll"
        "400":
          description: "Bad Request"
          schema:
            allOf:
              - $ref: "#/definitions/ErrorResponse"
              - properties:
                  data:
                    $ref: "#/definitions/StudentGet"
                  message:
                    example: "Server Couldn't Process the Request"
                  message_code:
                    example: "BAD_REQUEST"
        "401":
          description: "Unauthorized"
          schema:
            allOf:
              - $ref: "#/definitions/ErrorResponse"
              - properties:
                  message:
                    example: "User Do not have the Required Permissions"
                  message_code:
                    example: "UNAUTHORIZED"
        "404":
          description: "No Issue found"
          schema:
            allOf:
              - $ref: "#/definitions/ErrorResponse"
              - properties:
                  message:
                    example: "Issue not found"
                  message_code:
                    example: "NOT_FOUND"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/InternalErrorResponse"
    
  /issue/mngmt:
    put:
      tags:
        - Issue
      summary: Update an issue with new status, comments, and computer repair information
      description: |
        Updates the status of an issue, adds new comments, and updates computer repair status.
        Status can be 'Cancelled', 'Active', or 'Pending'. If all computers are repaired, the status changes to 'Done'.
      parameters:
        - name: Authorization
          in: header
          description: "An authorization header"
          required: true
          type: string
        - in: body
          name: issue
          description: Issue object that needs to be updated
          required: true
          schema:
              $ref: '#/definitions/ExampleActiveIssue'

      responses:
        200:
          description: Issue successfully updated
          schema:
            $ref: '#/definitions/UpdateResponseComments'
          examples:
            application/json:
              {
                "message": "Issue successfully updated",
                "status": 200,
                "message_code": "ISSUE_SUCCESSFULLY_UPDATED"
              }
        
        400:
          description: Invalid input or No changes detected
          schema:
            $ref: '#/definitions/ErrorResponseComments'
          examples:
            application/json:
              {
                "message": "ID is required or no changes detected",
                "status": 400,
                "message_code": "ISSUE_ID_REQUIRED"
              }
            
        404:
          description: Issue not found
          schema:
            $ref: '#/definitions/ErrorResponseComments'
          examples:
            application/json:
              {
                "message": "Issue not found",
                "status": 404,
                "message_code": "ISSUE_NOT_FOUND"
              }
        500:
          description: Internal server error
          schema:
            $ref: '#/definitions/ErrorResponseComments'
          examples:
            application/json:
              {
                "message": "Internal server error",
                "status": 500,
                "message_code": "INTERNAL_SERVER_ERROR"
              }
    


externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
