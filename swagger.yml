#This is the header of the file, whose main goal is to display important information
#about the .yml file.
swagger: "2.0"
info:
  description: "Lab-Management API's Documentation"
  version: "1.0.0"
  title: "Swagger Lab-Management API"
  termsOfService: "Terms"
  contact:
    email: "ebarahona@utn.ac.cr"
host: "localhost:5003"
basePath: "/booking_api"
#The tags are the identifiers for the paths that are created, this will assign a path with a unique tag,
#meaning that, an specific end-point belongs to a tag or identifier
tags:
  - name: "Labs"
    description: "All Lab's Endpoints"
  - name: "Booking"
    description: "All Booking's Endpoints"
#the schemes will define the protocol that are been used by the end-points inside the API
schemes:
  - "https"
  - "http"
#The definitions will display the information that the end-points will return, all along with the
#corresponding messages of the errors.
definitions:
  careerResponse:
    type: object
    properties:
      career_id:
        type: string
        example: "ITI"
      career_name:
        type: string
        example: "Tecnologia de la Informacion"
  subjectResponse:
    type: object
    properties:
      subject_id:
        type: string
        example: "ITI-412"
      subject_name:
        type: string
        example: "Metodolog√≠a Agiles de Desarrollo de Software"
  Response:
    type: object
    properties:
      data:
        type: array
        items:
          $ref: "#/definitions"
      message:
        type: string
        example: "Successfully requested"
      message_code:
        type: string
        example: "OK_MSG"
  ErrorResponse:
    type: object
    properties:
      data:
        type: string
        example: null
      message:
        type: string
      message_code:
        type: string
  InvalidIdErrorResponse:
    type: object
    properties:
      data:
        type: string
        example: null
      message:
        type: string
        example: "Invalid Id"
      message_code:
        type: string
        example: "INVALID_ID"
  InternalErrorResponse:
    type: object
    properties:
      data:
        type: string
        example: null
      message:
        type: string
        example: "Internal server error"
      message_code:
        type: string
        example: "INTERNAL_SERVER_ERROR_MSG"
  LabGet:
    type: object
    properties:
      _id:
        type: string
        example: "0183IEHU#&#J"
      LabID:
        type: integer
        example: 34
      name:
        type: string
        example: "Laboratories"
      description:
        type: string
        example: Laboratories Lab
  LabGetById:
    type: object
    properties:
      _id:
        type: integer
        example: 34
      name:
        type: string
        example: "Laboratories"
  LabPost:
    type: object
    required:
      - "name"
    properties:
      name:
        type: string
        example: "Laboratories"
      description:
        type: string
        example: "Laboratories Lab"
  BookingGet:
    type: object
    properties:
      professor:
        type: string
        example: "Ever Barahona Mendoza"
      professor_email:
        type: string
        example: "ebarahona@utn.ac.cr"
      career:
        type: array
        items:
          $ref: "#/definitions/careerResponse"
      subject:
        type: array
        items:
          $ref: "#/definitions/subjectResponse"
      lab:
        type: integer
        example: 412
      end_time:
        type: string
        example: "2024-07-11T21:00:00-06:00"
      start_time:
        type: string
        example: "2024-07-11T17:00:00-06:00"
      students:
        type: array
        items:
          type: string
      observations:
        type: string
        example: ""
  BookingPost:
    type: object
    required:
      - "professor"
      - "professor_email"
      - "career"
      - "subject"
      - "lab"
      - "end_time"
      - "start_time"
    properties:
      professor:
        type: string
        example: "Ever Barahona Mendoza"
      professor_email:
        type: string
        example: "ebarahona@utn.ac.cr"
      career:
        type: array
        items:
          $ref: "#/definitions/careerResponse"
      subject:
        type: array
        items:
          $ref: "#/definitions/subjectResponse"
      lab:
        type: integer
        example: 412
      end_time:
        type: string
        example: "2024-07-11T21:00:00-06:00"
      start_time:
        type: string
        example: "2024-07-11T17:00:00-06:00"
      students:
        type: array
        items:
          type: string
      observations:
        type: string
        example: ""
  ProfessorGetByEmail:
    type: object
    properties:
      data:
        properties:
          professor_name:
            type: string
            example: "Juan Luis Bravo"
          professor_email:
            type: string
            example: "juanluis@utn.ac.cr"
          CareerId:
            type: string
            example: "ITI"
          Career:
            type: string
            example: "Tecnologia de la Informacion"
          Courses:
            type: "array"
            items:
              type: object
              properties:
                course_id:
                  type: string
                  example: "ITI-201"
                course_name:
                  type: "string"
                  example: "Matematica discreta"
  ProfessorInfoGet:
    type: object
    properties:
      _id:
        type: string
        example: 7619ajbamami91
      professor_email:
        type: string
        example: "ebarahona@utn.ac.cr"
      professor_name:
        type: string
        example: "Ever Barahona Mendoza"
      career:
        type: object
        properties:
          career_id:
            type: string
            example: "ITI"
          career_name:
            type: string
            example: "Tecnologia de la Informacion"
      subject:
        type: array
        items:
          type: object
          properties:
            subject_id:
              type: string
            subject_name:
              type: string
        example:
        - subject_id: "ITI-123"
          subject_name: "Fundamentos de Base de Datos"
        - subject_id: "ITI-412"
          subject_name: "Ingenieria de Requerimientos y Modelado de SW"
  Issue:
    type: "object"
    required:
      - "lab"
      - "person"
      - "issue"
      - "report_to"
      - "observations"
      - "status"
      - "update"
    properties:
      lab:
        type: "string"
        example: "Lab A"
        description: "Name of the lab where the issue occurred."
      person:
        type: "object"
        required:
          - "email"
          - "student_name"
        properties:
          email:
            type: "string"
            format: "email"
            example: "student@example.com"
            description: "Email address of the person reporting the issue."
          student_name:
            type: "string"
            example: "John Doe"
            description: "Name of the student reporting the issue."
      issue:
        type: "array"
        items:
          type: "object"
          required:
            - "computer"
            - "description"
            - "is_repaired"
          properties:
            computer:
              type: "string"
              example: "Computer 1"
              description: "Name or ID of the computer."
            description:
              type: "string"
              example: "The computer is not turning on."
              description: "Description of the issue."
            is_repaired:
              type: "boolean"
              example: false
              description: "Indicates whether the issue has been repaired."
      report_to:
        type: "string"
        example: "Professor Smith"
        description: "Name of the person to report the issue to."
      observations:
        type: "string"
        example: "No additional observations."
        description: "Additional observations related to the issue."
      status:
        type: "string"
        example: "Open"
        description: "Current status of the issue."
      update:
        type: "array"
        items:
          type: "object"
          required:
            - "observation"
          properties:
            observation:
              type: "string"
              example: "Issue acknowledged."
              description: "Observation or update regarding the issue."
            date:
              type: "string"
              format: "date-time"
              example: "2024-07-18T12:00:00Z"
              description: "Date of the update. If not provided, the current date is used."

  IssueResponse:
    type: "object"
    properties:
      data:
        type: "object"
        properties:
          issue:
            $ref: "#/definitions/Issue"
      message:
        type: "string"
        example: "Issue successfully created"
      message_code:
        type: "string"
        example: "ISSUE_SUCCESSFULLY_CREATED"

  IssueErrorResponse:
    type: "object"
    properties:
      data:
        type: "string"
        example: null
      message:
        type: "string"
      message_code:
        type: "string"

  IssueAlreadyExistsErrorResponse:
    type: "object"
    properties:
      data:
        type: "string"
        example: null
      message:
        type: "string"
        example: "Issue already exists"
      message_code:
        type: "string"
        example: "LAB_ALREADY_EXIST"

#The paths are the ones with all the information of the CRUD methods of the end-points
paths:
  /Lab:
    get:
      tags:
        - "Labs"
      summary: "Get list of all Labs"
      description: "Get list of all Labs"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "200":
          description: "A list of countries"
          schema:
            $ref: "#/definitions/LabGet"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/InternalErrorResponse"
    post:
      tags:
        - "Labs"
      parameters:
        - in: "body"
          name: "body"
          description: "Lab object that needs to be added"
          required: true
          schema:
            $ref: "#/definitions/LabPost"
      summary: "Create a Lab"
      description: "Create a Lab"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "201":
          description: "Lab succesfully created"
          schema:
            allOf:
              - $ref: "#/definitions/Response"
              - properties:
                  data:
                    $ref: "#/definitions/LabGet"
                  message:
                    example: "Country successfully created"
                  message_code:
                    example: "COUNTRY_SUCCESSFULLY_CREATED"
        "409":
          description: "Lab already exists"
          schema:
            allOf:
              - $ref: "#/definitions/ErrorResponse"
              - properties:
                  message:
                    example: "Lab aready exist"
                  message_code:
                    example: "Lab_ALREADY_EXIST"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/InternalErrorResponse"
    put:
        tags:
          - "Labs"
        parameters:
          - in: "body"
            name: "body"
            description: "Lab object that needs to be updated"
            required: true
            schema:
              $ref: "#/definitions/LabGetById"
        summary: "Update a Lab"
        description: "Update a Lab"
        consumes:
          - "application/json"
        produces:
          - "application/json"
        responses:
          "200":
            description: "An updated Lab"
            schema:
              allOf:
                - $ref: "#/definitions/Response"
                - properties:
                    data:
                      $ref: "#/definitions/LabGet"
                    message:
                      example: "Lab successfully updated"
                    message_code:
                      example: "Lab_SUCCESSFULLY_UPDATED"
          "500":
            description: "Internal Server Error"
            schema:
              $ref: "#/definitions/InternalErrorResponse"

          "422":
            description: "Invalid Id"
            schema:
              allOf:
                - $ref: "#/definitions/ErrorResponse"
                - properties:
                    message:
                      example: "Invalid Id"
                    message_code:
                      example: "INVALID_ID"
  /Lab/{LabId}:
    get:
      tags:
        - "Labs"
      summary: "Find Lab by ID"
      description: "Returns a single Lab"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "LabId"
          in: "path"
          description: "ID of Lab to return"
          required: true
          type: "integer"
          format: "integer"
      responses:
        "200":
          description: "Get single Lab successfully"
          schema:
            allOf:
              - $ref: "#/definitions/Response"
              - properties:
                  data:
                    $ref: "#/definitions/LabGet"
        "404":
          description: "Lab not found"
          schema:
            allOf:
              - $ref: "#/definitions/ErrorResponse"
              - properties:
                  message:
                    example: "Lab not found"
                  message_code:
                    example: "Lab_ITEM_NOT_FOUND"
        "422":
          description: "Invalid Object Id"
          schema:
            $ref: "#/definitions/InvalidIdErrorResponse"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/InternalErrorResponse"
    delete:
      tags:
        - "Labs"
      summary: "Delete Lab by ID"
      description: "Returns a deleted Lab"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "LabId"
          in: "path"
          description: "ID of Lab to delete"
          required: true
          type: "integer"
          format: "integer"
      responses:
        "200":
          description: "Lab successfully deleted"
          schema:
            allOf:
              - $ref: "#/definitions/Response"
              - properties:
                  data:
                    $ref: "#/definitions/LabGet"
                  message:
                    example: "Lab successfully deleted"
                  message_code:
                    example: "Lab_SUCCESSFULLY_DELETED"
        "404":
          description: "Country not found"
          schema:
            allOf:
              - $ref: "#/definitions/ErrorResponse"
              - properties:
                  message:
                    example: "Lab not found"
                  message_code:
                    example: "Lab_ITEM_NOT_FOUND"
        "422":
          description: "Invalid Object Id"
          schema:
            $ref: "#/definitions/InvalidIdErrorResponse"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/InternalErrorResponse"
  /booking:
    post:
      tags:
        - "Booking"
      parameters:
        - in: "body"
          name: "body"
          description: "Booking object that needs to be added"
          required: true
          schema:
            $ref: "#/definitions/BookingPost"
      summary: "Create a Booking"
      description: "Create a Booking"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "201":
          description: "Booking succesfully created"
          schema:
            allOf:
              - $ref: "#/definitions/Response"
              - properties:
                  data:
                    $ref: "#/definitions/BookingGet"
                  message:
                    example: "Booking successfully created"
                  message_code:
                    example: "BOOKING_SUCCESSFULLY_CREATED"
        "409":
          description: "Booking already exists"
          schema:
            allOf:
              - $ref: "#/definitions/ErrorResponse"
              - properties:
                  message:
                    example: "Booking already exist"
                  message_code:
                    example: "Booking_ALREADY_EXIST"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/InternalErrorResponse"   
  /professor/byemail:
    get:
      tags:
        - "Professors"
      summary: "Get professor information by email"
      description: "Returns the information of a professor based on their email address"
      produces:
        - "application/json"
      parameters:
        - name: "professor_email"
          in: "query"
          description: "Email address of the professor"
          required: true
          type: "string"
      responses:
        "200":
          description: "Successful response"
          schema:
            allOf:
              - $ref: "#/definitions/Response"
              - properties:
                  data:
                    $ref: "#/definitions/ProfessorGetByEmail"
            
        "400":
          description: "Bad Request - Professor email parameter is required"
          schema:
            type: "object"
            properties:
              data:
                type: "string"
                example: null
              message:
                type: "string"
                example: "Professor email required"
              message_code:
                type: "string"
                example: "PROFESSOR_EMAIL_REQUIRED"
        "404":
          description: "Not Found - Professor not found"
          schema:
            allOf:
              - $ref: "#/definitions/ErrorResponse"
              - properties:
                  message:
                    example: "Professor not found"
                  message_code:
                    example: "PROFESSOR_NOT_FOUND"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/InternalErrorResponse"
  /professor/info:
    get:
      tags:
        - "Professors"
      summary: "Get professor information"
      description: "Returns the detailed information of a professor"
      produces:
        - "application/json"
      responses:
        "200":
          description: "Successful response"
          schema:
            $ref: "#/definitions/ProfessorInfoGet"
        "404":
          description: "Not Found - Professor not found"
          schema:
            allOf:
              - $ref: "#/definitions/ErrorResponse"
            example:
              data: null
              message: "Professor not found"
              message_code: "PROFESSOR_NOT_FOUND"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/InternalErrorResponse"
  /issue:
    post:
      tags:
        - "Issues"
      summary: "Create a new issue"
      description: "Create a new issue with the specified details."
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Issue object that needs to be added"
          required: true
          schema:
            type: "object"
            required:
              - "lab"
              - "person"
              - "issue"
              - "report_to"
              - "observations"
              - "status"
              - "update"
            properties:
              lab:
                type: "string"
                example: "Lab A"
                description: "Name of the lab where the issue occurred."
              person:
                type: "object"
                required:
                  - "email"
                  - "student_name"
                properties:
                  email:
                    type: "string"
                    format: "email"
                    example: "student@example.com"
                    description: "Email address of the person reporting the issue."
                  student_name:
                    type: "string"
                    example: "John Doe"
                    description: "Name of the student reporting the issue."
              issue:
                type: "array"
                items:
                  type: "object"
                  required:
                    - "computer"
                    - "description"
                    - "is_repaired"
                  properties:
                    computer:
                      type: "string"
                      example: "Computer 1"
                      description: "Name or ID of the computer."
                    description:
                      type: "string"
                      example: "The computer is not turning on."
                      description: "Description of the issue."
                    is_repaired:
                      type: "boolean"
                      example: false
                      description: "Indicates whether the issue has been repaired."
              report_to:
                type: "string"
                example: "Professor Smith"
                description: "Name of the person to report the issue to."
              observations:
                type: "string"
                example: "No additional observations."
                description: "Additional observations related to the issue."
              status:
                type: "string"
                example: "Open"
                description: "Current status of the issue."
              update:
                type: "array"
                items:
                  type: "object"
                  required:
                    - "observation"
                  properties:
                    observation:
                      type: "string"
                      example: "Issue acknowledged."
                      description: "Observation or update regarding the issue."
                    date:
                      type: "string"
                      format: "date-time"
                      example: "2024-07-18T12:00:00Z"
                      description: "Date of the update. If not provided, the current date is used."
      responses:
        "201":
          description: "Issue successfully created"
          schema:
            allOf:
              - $ref: "#/definitions/Response"
              - properties:
                  data:
                    type: "object"
                    properties:
                      lab_issue:
                        type: "object"
                        description: "Details of the created issue."
        "400":
          description: "Bad Request - Missing or invalid parameters"
          schema:
            allOf:
              - $ref: "#/definitions/ErrorResponse"
              - properties:
                  message:
                    example: "The lab is required"
                  message_code:
                    example: "ISSUE_LAB_REQUIRED"
        "409":
          description: "Conflict - Issue already exists"
          schema:
            allOf:
              - $ref: "#/definitions/ErrorResponse"
              - properties:
                  message:
                    example: "Issue already exists"
                  message_code:
                    example: "LAB_ALREADY_EXIST"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/InternalErrorResponse"

externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
